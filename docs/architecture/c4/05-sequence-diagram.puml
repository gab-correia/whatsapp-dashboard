@startuml WhatsApp Dashboard - Sequence Diagram
!theme plain

title Fluxo Completo: CriaÃ§Ã£o de InstÃ¢ncia atÃ© Recebimento de Mensagem

actor "UsuÃ¡rio" as user
participant "Frontend\n(React)" as frontend
participant "Backend API\n(Django)" as backend
participant "Evolution API\nv2.1.1" as evolution
participant "Celery Worker" as celery
database "PostgreSQL" as db
database "Redis" as redis
participant "WhatsApp" as whatsapp

== CriaÃ§Ã£o de InstÃ¢ncia ==
user -> frontend: Cria instÃ¢ncia "empresa01"
frontend -> backend: POST /instance/create\n{instanceName: "empresa01"}
backend -> evolution: POST /instance/create
evolution --> backend: 201 Created\n{instance: {...}}
backend --> frontend: 201 Created
frontend --> user: "âœ… InstÃ¢ncia criada!"

== ConfiguraÃ§Ã£o de Webhook ==
user -> frontend: Clica em "ğŸ”— Webhook"
frontend -> evolution: POST /webhook/set/empresa01\n{webhook: {url, events}}
evolution --> frontend: 201 Created\n{webhook: {...}}
frontend --> user: "âœ… Webhook configurado!"

== ConexÃ£o via QR Code ==
user -> frontend: Clica em "ğŸ“· Conectar"
frontend -> evolution: GET /instance/connect/empresa01
evolution --> frontend: 200 OK\n{base64: "data:image/png..."}
frontend --> user: Exibe QR Code
user -> whatsapp: Escaneia QR Code\nno celular
whatsapp -> evolution: Conecta via WebSocket
evolution -> backend: POST /webhooks/evolution/\n{event: "CONNECTION_UPDATE"}
backend -> redis: Publica task\nprocess_webhook
redis -> celery: Consome task
celery -> db: UPDATE webhook_log\nstatus = "success"

== Recebimento de Mensagem ==
whatsapp -> evolution: Cliente envia mensagem
evolution -> backend: POST /webhooks/evolution/\n{event: "MESSAGES_UPSERT", data: {...}}
backend -> db: INSERT webhook_log
backend -> redis: Publica task\nprocess_webhook(webhook_id)
backend --> evolution: 202 Accepted

celery -> redis: Consome task
celery -> db: SELECT webhook_log
celery -> celery: WebhookProcessor.\nprocess_messages_upsert()
celery -> db: INSERT OR UPDATE contact
celery -> db: INSERT message
celery -> db: UPDATE webhook_log\nstatus = "success"

== VisualizaÃ§Ã£o no Frontend ==
user -> frontend: Acessa /messages
frontend -> backend: GET /api/messages/
backend -> db: SELECT messages
db --> backend: Lista de mensagens
backend --> frontend: 200 OK\n{results: [...]}
frontend --> user: Exibe mensagens

@enduml
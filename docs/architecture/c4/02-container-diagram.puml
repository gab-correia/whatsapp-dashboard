@startuml WhatsApp Dashboard - Container Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title Diagrama de Containers - WhatsApp Dashboard

Person(user, "Usuário", "Administrador ou Operador do sistema")

System_Boundary(system, "WhatsApp Dashboard") {
    Container(web_app, "Web Application", "React 18, TypeScript, Vite 5", "Interface web responsiva para gerenciamento de instâncias WhatsApp")
    Container(api, "API Application", "Django 5.1, Django REST Framework", "Fornece API RESTful para frontend e recebe webhooks")
    Container(celery_worker, "Celery Worker", "Python 3.11, Celery 5", "Processa webhooks assincronamente e salva mensagens")
    Container(celery_beat, "Celery Beat", "Python 3.11, Celery 5", "Agenda tarefas periódicas (limpeza, sync)")
    
    ContainerDb(database, "Database", "PostgreSQL 15", "Armazena:\n- Mensagens\n- Contatos\n- Webhook Logs\n- Metadados")
    ContainerDb(cache, "Message Broker", "Redis 7", "Broker para Celery\nCache de sessões")
}

System_Ext(evolution, "Evolution API", "API v2.1.1 WhatsApp")
System_Ext(whatsapp, "WhatsApp Web", "Serviço WhatsApp")

' Frontend
Rel(user, web_app, "Usa", "HTTPS")
Rel(web_app, api, "Faz chamadas API", "JSON/HTTPS")

' Backend
Rel(api, database, "Lê/Escreve", "SQL/TCP")
Rel(api, cache, "Publica tarefas", "Redis Protocol")
Rel(api, evolution, "Gerencia instâncias", "REST/HTTPS")

' Celery
Rel(celery_worker, cache, "Consome tarefas", "Redis Protocol")
Rel(celery_worker, database, "Salva mensagens", "SQL/TCP")
Rel(celery_beat, cache, "Agenda tarefas", "Redis Protocol")

' External
Rel(evolution, api, "Envia webhooks", "HTTP POST")
Rel(evolution, whatsapp, "Conecta via", "WebSocket")

SHOW_LEGEND()
@enduml

@startuml 02-container-diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title Container Diagram - WhatsApp Dashboard

' =====================================================================
' Pessoas (Atores do Sistema)
' =====================================================================
Person(user, "Usuário Final", "Acessa o dashboard para visualizar conversas e métricas")
Person(admin, "Administrador", "Gerencia configurações e usuários do sistema")

' =====================================================================
' Sistema Principal com Containers
' =====================================================================
System_Boundary(whatsapp_dashboard, "WhatsApp Dashboard") {
    Container(nginx, "Reverse Proxy", "Nginx", "Roteia requisições HTTP/HTTPS e serve arquivos estáticos do frontend")
    
    Container(frontend, "Frontend Web", "React.js, Vite, Tailwind CSS", "Single Page Application que exibe dashboard interativo com conversas e métricas")
    
    Container(backend, "Backend API", "Django REST Framework, Python", "Processa webhooks, expõe API REST e implementa regras de negócio")
    
    Container(worker, "Async Worker", "Celery, Python", "Processa tarefas assíncronas em background (análise de mensagens, relatórios)")
    
    ContainerDb(database, "Database", "PostgreSQL", "Armazena mensagens, contatos, usuários, métricas e configurações")
    
    ContainerDb(cache, "Cache & Queue", "Redis", "Armazena cache de sessões e fila de tarefas do Celery")
}

' =====================================================================
' Sistemas Externos
' =====================================================================
System_Ext(evolution_api, "Evolution API", "API externa que fornece integração com WhatsApp Business")

' =====================================================================
' Relacionamentos - Usuários para Sistema
' =====================================================================
Rel(user, nginx, "Acessa dashboard via browser", "HTTPS:443")
Rel(admin, nginx, "Acessa painel administrativo", "HTTPS:443")

' =====================================================================
' Relacionamentos - Internos do Sistema
' =====================================================================
Rel(nginx, frontend, "Serve arquivos estáticos", "HTTP:3000")
Rel(nginx, backend, "Roteia requisições da API", "HTTP:8000")

Rel(frontend, backend, "Consome endpoints REST", "JSON/HTTPS")

Rel(backend, database, "Lê e escreve dados", "TCP:5432/SQL")
Rel(backend, cache, "Armazena cache e enfileira tasks", "TCP:6379/Redis Protocol")

Rel(backend, worker, "Enfileira tarefas via Redis", "Redis Queue")
Rel(worker, cache, "Consome tarefas da fila", "TCP:6379/Redis Protocol")
Rel(worker, database, "Persiste resultados processados", "TCP:5432/SQL")

' =====================================================================
' Relacionamentos - Sistema para Externos
' =====================================================================
Rel(evolution_api, backend, "Envia webhooks de mensagens", "HTTPS/JSON Webhook")
Rel(backend, evolution_api, "Consulta dados e status", "HTTPS/REST API")

' =====================================================================
' Notas Explicativas
' =====================================================================
note right of worker
  **Tarefas Assíncronas:**
  • Análise de sentimento
  • Geração de relatórios
  • Processamento de webhooks
  • Sincronização de dados
end note

@enduml

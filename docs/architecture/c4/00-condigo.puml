@startuml WhatsApp Dashboard - C4 Model
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title WhatsApp Dashboard - Arquitetura C4

' Definições de cores
!define PRIMARY_COLOR #4A90E2
!define SECONDARY_COLOR #50C878
!define WARNING_COLOR #FFA500
!define DANGER_COLOR #DC3545

Person(user, "Usuário", "Operador do sistema que gerencia mensagens WhatsApp")
Person(customer, "Cliente WhatsApp", "Usuário final que envia mensagens via WhatsApp")

System_Boundary(whatsapp_dashboard, "WhatsApp Dashboard") {
    Container(frontend, "Frontend Web", "React, TypeScript, Vite", "Interface para gerenciar instâncias e visualizar mensagens")
    Container(backend, "Backend API", "Django REST Framework", "API RESTful para gerenciamento de dados")
    Container(celery_worker, "Celery Worker", "Python, Celery", "Processamento assíncrono de webhooks")
    Container(celery_beat, "Celery Beat", "Python, Celery", "Agendamento de tarefas periódicas")
    ContainerDb(postgres, "PostgreSQL", "PostgreSQL 15", "Armazena mensagens, contatos e logs")
    ContainerDb(redis, "Redis", "Redis 7", "Broker de mensagens e cache")
}

System_Ext(evolution_api, "Evolution API", "API não-oficial do WhatsApp Web (v2.1.1)")
System_Ext(whatsapp, "WhatsApp", "Serviço de mensagens WhatsApp")

' Relacionamentos Contexto
Rel(user, frontend, "Acessa via navegador", "HTTPS")
Rel(customer, whatsapp, "Envia mensagens", "Internet")
Rel(whatsapp, evolution_api, "Conecta via", "WebSocket")

' Relacionamentos Sistema
Rel(frontend, backend, "Faz requisições API", "REST/JSON")
Rel(backend, postgres, "Lê/Escreve dados", "SQL")
Rel(backend, redis, "Publica tarefas", "Redis Protocol")
Rel(celery_worker, redis, "Consome tarefas", "Redis Protocol")
Rel(celery_worker, postgres, "Salva mensagens", "SQL")
Rel(celery_beat, redis, "Agenda tarefas", "Redis Protocol")
Rel(backend, evolution_api, "Cria instâncias\nConfigura webhooks", "REST/JSON")
Rel(evolution_api, backend, "Envia webhooks", "HTTP POST")

SHOW_LEGEND()
@enduml

